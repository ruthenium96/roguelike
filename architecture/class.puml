@startuml
'https://plantuml.com/class-diagram

class Controller {
+ void start()
}

Controller "1" o-- "1" GameEngine
Controller "1" o-- "1" UI
Controller "1" o-- "1" InputManager

'INPUT SECTION:
abstract InputManager {
+Command readCommand()
}

InputManager --|> KeyboardManager

class Command {
}

Command "1" o-- "1" CommandType

enum CommandType {
ChangeWorld
ChangeUI
TerminateGame
Unknown
}

'UI SECTION:

class UI {
+void draw(Map, Inventory)
}

'WORLD LOGIC SECTION

class GameEngine {
+ void applyExternalAction(Action)
}

GameEngine "1" o-- "1" WorldState
GameEngine "1" o-- "1" WorldGenerator

abstract WorldGenerator {
+ GameObject[] generateObjects(Coordinate, Map)
}

WorldGenerator --|> WorldGeneratorFromFile
WorldGenerator --|> WorldGeneratorOnTheFly

class WorldState {
+Map getMap()
}

WorldState "1" o-- "1..*" GameObject

'Object is something with Coordinate, Item[], Action[]
abstract class GameObject {
- identity: Identity
+ Identity getIdentity()
- coordinate: Coordinate
+ Coordinate getCoordinate()
+ Action[] getActions()
- values: Value[]
}

'Player is self-explaining
class Player
'Tile is something like floor, each coordinate has to have one Tile
class Tile
'Artefact is something able to hold Item (like chest or just item).
'It is required because Item is not Object.
class Artefact

GameObject ---|> Tile
GameObject ---|> Player
GameObject ---|> Artefact

'Item is self-explaining
class Item
'Action is attempt of Object to change the World (including itself)
abstract class Action {
- id: Identity
+ Identity getIdentityOfAuthor()
- targets: Targets[]
+ Targets[] getTargets()
- ifStatements: IfStatement[]
- changeTarget: LambdaFunction GameObject->void
}

GameObject "1" o-- "*" Item
GameObject "1" o-- "*" Action

@enduml