@startuml
'https://plantuml.com/class-diagram

'The main class controlling game logic, UI and user input.
class Controller {
'Start game.
+ void init()
+ void start()
}

Controller "1" o-- "1" GameEngine
Controller "1" o-- "1" UI
Controller "1" o-- "1" InputManager

abstract IStyle
UI "1" o-- "1" IStyle
UI "1" o-- "1" ConsoleDisplay

'INPUT SECTION:
abstract InputManager {
'This function waits for user input and returns Command.
+Command readCommand()
}

InputManager -.|> KeyboardManager

class Command {
        Controller_Unknown
        Controller_ChangeRegime
        Controller_Exit
        Move
        Interact
        UI_DropItem
        Ignore
        World_ApplyItem
        World_DropItem
        Death
        WorldUITransfer
}

enum Command {
ChangeWorld
ChangeUI
TerminateGame
Unknown
}

'UI SECTION:

class UI {
'Draws game, based on Map and Inventory information.
+Command applyCommand(Command)
}

'WORLD LOGIC SECTION

class GameEngine {
'Takes Action from Controller and apply it to WorldState.
+ Command applyCommand(Command)
'Get Map, based on WorldState.
+ Map getMap()
'Get Inventory of Player, based on WorldState.
+ Inventory getPlayerInventory()
}

GameEngine "1" o-- "1" WorldState
GameEngine "1" o-- "1" WorldGenerator

abstract WorldGenerator {
'Return GameObjects on new Coordinate, using information from Map.
+ GameObject[] generateObjects(Coordinate, Map)
}

WorldGenerator <|.- WorldGeneratorFromFile
WorldGenerator <|.- WorldGeneratorOnTheFly
WorldGenerator "1" o-- "1" Serializer
WorldGeneratorFromFile "1" o-- "1" Deserializer


class Deserializer {
+deserialize()
}

class Serializer {
+serialize()
}

class ProtobufEngine {
+serialize()
+deserialize()
}

ProtobufEngine "1" --o "1" Serializer
ProtobufEngine "1" --o "1" Deserializer

class Entity {
+std::any: getProperty(String)
+getProperty(String, std::any)
+deleteProperty(String)
}

Entity <|.- GameObject
Entity <|.- Action
Entity <|.- Item

class WorldState {
'Return Map.
+ Map getMap()
'Return Inventory of Player.
+ Inventory getPlayerInventory()
}

WorldState "1" o-- "1" ObjectObserver
ObjectObserver "1" o-- "*" GameObject


'Object is something with Coordinate, Item[], Action[]
abstract class GameObject {
- identity: Identity
+ Identity: getIdentity()
- coordinate: Coordinate
+ Coordinate: getCoordinate()
+ Item[]: getItems()
}

class Player
class Floor
class Wall
'Artefact is something able to hold Item (like chest or just item).
'It is required because Item is not GameObject.
class Artefact

GameObject <|.- Floor
GameObject <|.- Wall
GameObject <|.- Player
GameObject <|.- Artefact
GameObject <|.- NPC
GameObject <|.- Mold

'Item is self-explaining
class Item
'Action is attempt of GameObject to change the World (including itself)
abstract class Action {
+ bool: precondition(ObjectObserver, ActionObserver)
+ changeTarget(ObjectObserver, ActionObserver)
}

abstract NPCAction

Action <|.- Move
Action <|.- PlayerDrop
Action <|.- PlayerUIInteract
Action <|.- PlayerWorldInteract
Action <|.- MoldInteraction
Action <|.- MoldEveryTurn
Action <|.- Confuse
Action <|.- PickDropItem
Action <|.- Poison

Action <|.- NPCAction
NPCAction <|.- NPCAgrressive
NPCAction <|.- NPCCoward
NPCAction <|.- NPCInactive

GameObject "1" o-- "*" Item

WorldState "1" o-- "1" ActionObserver
ActionObserver "1" o-- "*" Action

@enduml