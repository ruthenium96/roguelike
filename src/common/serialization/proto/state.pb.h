// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_state_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_state_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_state_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_state_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_state_2eproto;
namespace ProtoSerializer {
class Coordinates;
struct CoordinatesDefaultTypeInternal;
extern CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
class Item;
struct ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class Object;
struct ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class State;
struct StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
}  // namespace ProtoSerializer
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoSerializer::Coordinates* Arena::CreateMaybeMessage<::ProtoSerializer::Coordinates>(Arena*);
template<> ::ProtoSerializer::Item* Arena::CreateMaybeMessage<::ProtoSerializer::Item>(Arena*);
template<> ::ProtoSerializer::Object* Arena::CreateMaybeMessage<::ProtoSerializer::Object>(Arena*);
template<> ::ProtoSerializer::Player* Arena::CreateMaybeMessage<::ProtoSerializer::Player>(Arena*);
template<> ::ProtoSerializer::State* Arena::CreateMaybeMessage<::ProtoSerializer::State>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProtoSerializer {

enum Item_ItemType : int {
  Item_ItemType_STICK = 0,
  Item_ItemType_Item_ItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Item_ItemType_Item_ItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Item_ItemType_IsValid(int value);
constexpr Item_ItemType Item_ItemType_ItemType_MIN = Item_ItemType_STICK;
constexpr Item_ItemType Item_ItemType_ItemType_MAX = Item_ItemType_STICK;
constexpr int Item_ItemType_ItemType_ARRAYSIZE = Item_ItemType_ItemType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Item_ItemType_descriptor();
template<typename T>
inline const std::string& Item_ItemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Item_ItemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Item_ItemType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Item_ItemType_descriptor(), enum_t_value);
}
inline bool Item_ItemType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Item_ItemType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Item_ItemType>(
    Item_ItemType_descriptor(), name, value);
}
enum Object_ObjectType : int {
  Object_ObjectType_ARTEFACT = 0,
  Object_ObjectType_FLOOR = 1,
  Object_ObjectType_WALL = 2,
  Object_ObjectType_Object_ObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Object_ObjectType_Object_ObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Object_ObjectType_IsValid(int value);
constexpr Object_ObjectType Object_ObjectType_ObjectType_MIN = Object_ObjectType_ARTEFACT;
constexpr Object_ObjectType Object_ObjectType_ObjectType_MAX = Object_ObjectType_WALL;
constexpr int Object_ObjectType_ObjectType_ARRAYSIZE = Object_ObjectType_ObjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_ObjectType_descriptor();
template<typename T>
inline const std::string& Object_ObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Object_ObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Object_ObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Object_ObjectType_descriptor(), enum_t_value);
}
inline bool Object_ObjectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Object_ObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Object_ObjectType>(
    Object_ObjectType_descriptor(), name, value);
}
// ===================================================================

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoSerializer.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit constexpr Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Player& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoSerializer.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kHealthFieldNumber = 2,
    kLvlFieldNumber = 3,
    kXpFieldNumber = 4,
  };
  // int32 player_id = 1;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // int32 health = 2;
  void clear_health();
  int32_t health() const;
  void set_health(int32_t value);
  private:
  int32_t _internal_health() const;
  void _internal_set_health(int32_t value);
  public:

  // int32 lvl = 3;
  void clear_lvl();
  int32_t lvl() const;
  void set_lvl(int32_t value);
  private:
  int32_t _internal_lvl() const;
  void _internal_set_lvl(int32_t value);
  public:

  // int32 xp = 4;
  void clear_xp();
  int32_t xp() const;
  void set_xp(int32_t value);
  private:
  int32_t _internal_xp() const;
  void _internal_set_xp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoSerializer.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t player_id_;
  int32_t health_;
  int32_t lvl_;
  int32_t xp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_2eproto;
};
// -------------------------------------------------------------------

class Coordinates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoSerializer.Coordinates) */ {
 public:
  inline Coordinates() : Coordinates(nullptr) {}
  ~Coordinates() override;
  explicit constexpr Coordinates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coordinates(const Coordinates& from);
  Coordinates(Coordinates&& from) noexcept
    : Coordinates() {
    *this = ::std::move(from);
  }

  inline Coordinates& operator=(const Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinates& operator=(Coordinates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coordinates& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coordinates* internal_default_instance() {
    return reinterpret_cast<const Coordinates*>(
               &_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Coordinates& a, Coordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coordinates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coordinates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Coordinates& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoSerializer.Coordinates";
  }
  protected:
  explicit Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoSerializer.Coordinates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t x_;
  int32_t y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_2eproto;
};
// -------------------------------------------------------------------

class Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoSerializer.Item) */ {
 public:
  inline Item() : Item(nullptr) {}
  ~Item() override;
  explicit constexpr Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Item(const Item& from);
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Item& operator=(Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Item& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoSerializer.Item";
  }
  protected:
  explicit Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Item_ItemType ItemType;
  static constexpr ItemType STICK =
    Item_ItemType_STICK;
  static inline bool ItemType_IsValid(int value) {
    return Item_ItemType_IsValid(value);
  }
  static constexpr ItemType ItemType_MIN =
    Item_ItemType_ItemType_MIN;
  static constexpr ItemType ItemType_MAX =
    Item_ItemType_ItemType_MAX;
  static constexpr int ItemType_ARRAYSIZE =
    Item_ItemType_ItemType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ItemType_descriptor() {
    return Item_ItemType_descriptor();
  }
  template<typename T>
  static inline const std::string& ItemType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ItemType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ItemType_Name.");
    return Item_ItemType_Name(enum_t_value);
  }
  static inline bool ItemType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ItemType* value) {
    return Item_ItemType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
  };
  // .ProtoSerializer.Item.ItemType type = 1;
  void clear_type();
  ::ProtoSerializer::Item_ItemType type() const;
  void set_type(::ProtoSerializer::Item_ItemType value);
  private:
  ::ProtoSerializer::Item_ItemType _internal_type() const;
  void _internal_set_type(::ProtoSerializer::Item_ItemType value);
  public:

  // int32 owner_id = 2;
  void clear_owner_id();
  int32_t owner_id() const;
  void set_owner_id(int32_t value);
  private:
  int32_t _internal_owner_id() const;
  void _internal_set_owner_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoSerializer.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  int32_t owner_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_2eproto;
};
// -------------------------------------------------------------------

class Object final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoSerializer.Object) */ {
 public:
  inline Object() : Object(nullptr) {}
  ~Object() override;
  explicit constexpr Object(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Object(const Object& from);
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object& operator=(Object&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Object& default_instance() {
    return *internal_default_instance();
  }
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }
  inline void Swap(Object* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Object& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Object& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoSerializer.Object";
  }
  protected:
  explicit Object(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Object_ObjectType ObjectType;
  static constexpr ObjectType ARTEFACT =
    Object_ObjectType_ARTEFACT;
  static constexpr ObjectType FLOOR =
    Object_ObjectType_FLOOR;
  static constexpr ObjectType WALL =
    Object_ObjectType_WALL;
  static inline bool ObjectType_IsValid(int value) {
    return Object_ObjectType_IsValid(value);
  }
  static constexpr ObjectType ObjectType_MIN =
    Object_ObjectType_ObjectType_MIN;
  static constexpr ObjectType ObjectType_MAX =
    Object_ObjectType_ObjectType_MAX;
  static constexpr int ObjectType_ARRAYSIZE =
    Object_ObjectType_ObjectType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ObjectType_descriptor() {
    return Object_ObjectType_descriptor();
  }
  template<typename T>
  static inline const std::string& ObjectType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ObjectType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ObjectType_Name.");
    return Object_ObjectType_Name(enum_t_value);
  }
  static inline bool ObjectType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ObjectType* value) {
    return Object_ObjectType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCoordsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .ProtoSerializer.Coordinates coords = 2;
  bool has_coords() const;
  private:
  bool _internal_has_coords() const;
  public:
  void clear_coords();
  const ::ProtoSerializer::Coordinates& coords() const;
  PROTOBUF_NODISCARD ::ProtoSerializer::Coordinates* release_coords();
  ::ProtoSerializer::Coordinates* mutable_coords();
  void set_allocated_coords(::ProtoSerializer::Coordinates* coords);
  private:
  const ::ProtoSerializer::Coordinates& _internal_coords() const;
  ::ProtoSerializer::Coordinates* _internal_mutable_coords();
  public:
  void unsafe_arena_set_allocated_coords(
      ::ProtoSerializer::Coordinates* coords);
  ::ProtoSerializer::Coordinates* unsafe_arena_release_coords();

  // .ProtoSerializer.Object.ObjectType type = 1;
  void clear_type();
  ::ProtoSerializer::Object_ObjectType type() const;
  void set_type(::ProtoSerializer::Object_ObjectType value);
  private:
  ::ProtoSerializer::Object_ObjectType _internal_type() const;
  void _internal_set_type(::ProtoSerializer::Object_ObjectType value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoSerializer.Object)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ProtoSerializer::Coordinates* coords_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_2eproto;
};
// -------------------------------------------------------------------

class State final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoSerializer.State) */ {
 public:
  inline State() : State(nullptr) {}
  ~State() override;
  explicit constexpr State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const State& default_instance() {
    return *internal_default_instance();
  }
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<State>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const State& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const State& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoSerializer.State";
  }
  protected:
  explicit State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kObjectsFieldNumber = 3,
    kPlayerFieldNumber = 1,
  };
  // repeated .ProtoSerializer.Item items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::ProtoSerializer::Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoSerializer::Item >*
      mutable_items();
  private:
  const ::ProtoSerializer::Item& _internal_items(int index) const;
  ::ProtoSerializer::Item* _internal_add_items();
  public:
  const ::ProtoSerializer::Item& items(int index) const;
  ::ProtoSerializer::Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoSerializer::Item >&
      items() const;

  // repeated .ProtoSerializer.Object objects = 3;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::ProtoSerializer::Object* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoSerializer::Object >*
      mutable_objects();
  private:
  const ::ProtoSerializer::Object& _internal_objects(int index) const;
  ::ProtoSerializer::Object* _internal_add_objects();
  public:
  const ::ProtoSerializer::Object& objects(int index) const;
  ::ProtoSerializer::Object* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoSerializer::Object >&
      objects() const;

  // .ProtoSerializer.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::ProtoSerializer::Player& player() const;
  PROTOBUF_NODISCARD ::ProtoSerializer::Player* release_player();
  ::ProtoSerializer::Player* mutable_player();
  void set_allocated_player(::ProtoSerializer::Player* player);
  private:
  const ::ProtoSerializer::Player& _internal_player() const;
  ::ProtoSerializer::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::ProtoSerializer::Player* player);
  ::ProtoSerializer::Player* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:ProtoSerializer.State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoSerializer::Item > items_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoSerializer::Object > objects_;
  ::ProtoSerializer::Player* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Player

// int32 player_id = 1;
inline void Player::clear_player_id() {
  player_id_ = 0;
}
inline int32_t Player::_internal_player_id() const {
  return player_id_;
}
inline int32_t Player::player_id() const {
  // @@protoc_insertion_point(field_get:ProtoSerializer.Player.player_id)
  return _internal_player_id();
}
inline void Player::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void Player::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:ProtoSerializer.Player.player_id)
}

// int32 health = 2;
inline void Player::clear_health() {
  health_ = 0;
}
inline int32_t Player::_internal_health() const {
  return health_;
}
inline int32_t Player::health() const {
  // @@protoc_insertion_point(field_get:ProtoSerializer.Player.health)
  return _internal_health();
}
inline void Player::_internal_set_health(int32_t value) {
  
  health_ = value;
}
inline void Player::set_health(int32_t value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:ProtoSerializer.Player.health)
}

// int32 lvl = 3;
inline void Player::clear_lvl() {
  lvl_ = 0;
}
inline int32_t Player::_internal_lvl() const {
  return lvl_;
}
inline int32_t Player::lvl() const {
  // @@protoc_insertion_point(field_get:ProtoSerializer.Player.lvl)
  return _internal_lvl();
}
inline void Player::_internal_set_lvl(int32_t value) {
  
  lvl_ = value;
}
inline void Player::set_lvl(int32_t value) {
  _internal_set_lvl(value);
  // @@protoc_insertion_point(field_set:ProtoSerializer.Player.lvl)
}

// int32 xp = 4;
inline void Player::clear_xp() {
  xp_ = 0;
}
inline int32_t Player::_internal_xp() const {
  return xp_;
}
inline int32_t Player::xp() const {
  // @@protoc_insertion_point(field_get:ProtoSerializer.Player.xp)
  return _internal_xp();
}
inline void Player::_internal_set_xp(int32_t value) {
  
  xp_ = value;
}
inline void Player::set_xp(int32_t value) {
  _internal_set_xp(value);
  // @@protoc_insertion_point(field_set:ProtoSerializer.Player.xp)
}

// -------------------------------------------------------------------

// Coordinates

// int32 x = 1;
inline void Coordinates::clear_x() {
  x_ = 0;
}
inline int32_t Coordinates::_internal_x() const {
  return x_;
}
inline int32_t Coordinates::x() const {
  // @@protoc_insertion_point(field_get:ProtoSerializer.Coordinates.x)
  return _internal_x();
}
inline void Coordinates::_internal_set_x(int32_t value) {
  
  x_ = value;
}
inline void Coordinates::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ProtoSerializer.Coordinates.x)
}

// int32 y = 2;
inline void Coordinates::clear_y() {
  y_ = 0;
}
inline int32_t Coordinates::_internal_y() const {
  return y_;
}
inline int32_t Coordinates::y() const {
  // @@protoc_insertion_point(field_get:ProtoSerializer.Coordinates.y)
  return _internal_y();
}
inline void Coordinates::_internal_set_y(int32_t value) {
  
  y_ = value;
}
inline void Coordinates::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ProtoSerializer.Coordinates.y)
}

// -------------------------------------------------------------------

// Item

// .ProtoSerializer.Item.ItemType type = 1;
inline void Item::clear_type() {
  type_ = 0;
}
inline ::ProtoSerializer::Item_ItemType Item::_internal_type() const {
  return static_cast< ::ProtoSerializer::Item_ItemType >(type_);
}
inline ::ProtoSerializer::Item_ItemType Item::type() const {
  // @@protoc_insertion_point(field_get:ProtoSerializer.Item.type)
  return _internal_type();
}
inline void Item::_internal_set_type(::ProtoSerializer::Item_ItemType value) {
  
  type_ = value;
}
inline void Item::set_type(::ProtoSerializer::Item_ItemType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ProtoSerializer.Item.type)
}

// int32 owner_id = 2;
inline void Item::clear_owner_id() {
  owner_id_ = 0;
}
inline int32_t Item::_internal_owner_id() const {
  return owner_id_;
}
inline int32_t Item::owner_id() const {
  // @@protoc_insertion_point(field_get:ProtoSerializer.Item.owner_id)
  return _internal_owner_id();
}
inline void Item::_internal_set_owner_id(int32_t value) {
  
  owner_id_ = value;
}
inline void Item::set_owner_id(int32_t value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:ProtoSerializer.Item.owner_id)
}

// -------------------------------------------------------------------

// Object

// .ProtoSerializer.Object.ObjectType type = 1;
inline void Object::clear_type() {
  type_ = 0;
}
inline ::ProtoSerializer::Object_ObjectType Object::_internal_type() const {
  return static_cast< ::ProtoSerializer::Object_ObjectType >(type_);
}
inline ::ProtoSerializer::Object_ObjectType Object::type() const {
  // @@protoc_insertion_point(field_get:ProtoSerializer.Object.type)
  return _internal_type();
}
inline void Object::_internal_set_type(::ProtoSerializer::Object_ObjectType value) {
  
  type_ = value;
}
inline void Object::set_type(::ProtoSerializer::Object_ObjectType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ProtoSerializer.Object.type)
}

// .ProtoSerializer.Coordinates coords = 2;
inline bool Object::_internal_has_coords() const {
  return this != internal_default_instance() && coords_ != nullptr;
}
inline bool Object::has_coords() const {
  return _internal_has_coords();
}
inline void Object::clear_coords() {
  if (GetArenaForAllocation() == nullptr && coords_ != nullptr) {
    delete coords_;
  }
  coords_ = nullptr;
}
inline const ::ProtoSerializer::Coordinates& Object::_internal_coords() const {
  const ::ProtoSerializer::Coordinates* p = coords_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProtoSerializer::Coordinates&>(
      ::ProtoSerializer::_Coordinates_default_instance_);
}
inline const ::ProtoSerializer::Coordinates& Object::coords() const {
  // @@protoc_insertion_point(field_get:ProtoSerializer.Object.coords)
  return _internal_coords();
}
inline void Object::unsafe_arena_set_allocated_coords(
    ::ProtoSerializer::Coordinates* coords) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coords_);
  }
  coords_ = coords;
  if (coords) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoSerializer.Object.coords)
}
inline ::ProtoSerializer::Coordinates* Object::release_coords() {
  
  ::ProtoSerializer::Coordinates* temp = coords_;
  coords_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProtoSerializer::Coordinates* Object::unsafe_arena_release_coords() {
  // @@protoc_insertion_point(field_release:ProtoSerializer.Object.coords)
  
  ::ProtoSerializer::Coordinates* temp = coords_;
  coords_ = nullptr;
  return temp;
}
inline ::ProtoSerializer::Coordinates* Object::_internal_mutable_coords() {
  
  if (coords_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProtoSerializer::Coordinates>(GetArenaForAllocation());
    coords_ = p;
  }
  return coords_;
}
inline ::ProtoSerializer::Coordinates* Object::mutable_coords() {
  ::ProtoSerializer::Coordinates* _msg = _internal_mutable_coords();
  // @@protoc_insertion_point(field_mutable:ProtoSerializer.Object.coords)
  return _msg;
}
inline void Object::set_allocated_coords(::ProtoSerializer::Coordinates* coords) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete coords_;
  }
  if (coords) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ProtoSerializer::Coordinates>::GetOwningArena(coords);
    if (message_arena != submessage_arena) {
      coords = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coords, submessage_arena);
    }
    
  } else {
    
  }
  coords_ = coords;
  // @@protoc_insertion_point(field_set_allocated:ProtoSerializer.Object.coords)
}

// -------------------------------------------------------------------

// State

// .ProtoSerializer.Player player = 1;
inline bool State::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool State::has_player() const {
  return _internal_has_player();
}
inline void State::clear_player() {
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
inline const ::ProtoSerializer::Player& State::_internal_player() const {
  const ::ProtoSerializer::Player* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProtoSerializer::Player&>(
      ::ProtoSerializer::_Player_default_instance_);
}
inline const ::ProtoSerializer::Player& State::player() const {
  // @@protoc_insertion_point(field_get:ProtoSerializer.State.player)
  return _internal_player();
}
inline void State::unsafe_arena_set_allocated_player(
    ::ProtoSerializer::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProtoSerializer.State.player)
}
inline ::ProtoSerializer::Player* State::release_player() {
  
  ::ProtoSerializer::Player* temp = player_;
  player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProtoSerializer::Player* State::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:ProtoSerializer.State.player)
  
  ::ProtoSerializer::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::ProtoSerializer::Player* State::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProtoSerializer::Player>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::ProtoSerializer::Player* State::mutable_player() {
  ::ProtoSerializer::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:ProtoSerializer.State.player)
  return _msg;
}
inline void State::set_allocated_player(::ProtoSerializer::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ProtoSerializer::Player>::GetOwningArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:ProtoSerializer.State.player)
}

// repeated .ProtoSerializer.Item items = 2;
inline int State::_internal_items_size() const {
  return items_.size();
}
inline int State::items_size() const {
  return _internal_items_size();
}
inline void State::clear_items() {
  items_.Clear();
}
inline ::ProtoSerializer::Item* State::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoSerializer.State.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoSerializer::Item >*
State::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ProtoSerializer.State.items)
  return &items_;
}
inline const ::ProtoSerializer::Item& State::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::ProtoSerializer::Item& State::items(int index) const {
  // @@protoc_insertion_point(field_get:ProtoSerializer.State.items)
  return _internal_items(index);
}
inline ::ProtoSerializer::Item* State::_internal_add_items() {
  return items_.Add();
}
inline ::ProtoSerializer::Item* State::add_items() {
  ::ProtoSerializer::Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:ProtoSerializer.State.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoSerializer::Item >&
State::items() const {
  // @@protoc_insertion_point(field_list:ProtoSerializer.State.items)
  return items_;
}

// repeated .ProtoSerializer.Object objects = 3;
inline int State::_internal_objects_size() const {
  return objects_.size();
}
inline int State::objects_size() const {
  return _internal_objects_size();
}
inline void State::clear_objects() {
  objects_.Clear();
}
inline ::ProtoSerializer::Object* State::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoSerializer.State.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoSerializer::Object >*
State::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:ProtoSerializer.State.objects)
  return &objects_;
}
inline const ::ProtoSerializer::Object& State::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::ProtoSerializer::Object& State::objects(int index) const {
  // @@protoc_insertion_point(field_get:ProtoSerializer.State.objects)
  return _internal_objects(index);
}
inline ::ProtoSerializer::Object* State::_internal_add_objects() {
  return objects_.Add();
}
inline ::ProtoSerializer::Object* State::add_objects() {
  ::ProtoSerializer::Object* _add = _internal_add_objects();
  // @@protoc_insertion_point(field_add:ProtoSerializer.State.objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoSerializer::Object >&
State::objects() const {
  // @@protoc_insertion_point(field_list:ProtoSerializer.State.objects)
  return objects_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoSerializer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ProtoSerializer::Item_ItemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoSerializer::Item_ItemType>() {
  return ::ProtoSerializer::Item_ItemType_descriptor();
}
template <> struct is_proto_enum< ::ProtoSerializer::Object_ObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoSerializer::Object_ObjectType>() {
  return ::ProtoSerializer::Object_ObjectType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_state_2eproto
